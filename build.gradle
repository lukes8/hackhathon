buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.4.2"
        classpath "org.ajoberstar.reckon:reckon-gradle:0.13.0"
     }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "com.gorylenko.gradle-git-properties" version "2.2.4"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'java'
apply plugin: 'com.google.cloud.tools.appengine'
apply plugin: "org.ajoberstar.reckon"
apply plugin: "com.gorylenko.gradle-git-properties"

group = 'com.cgi'
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework:spring-context-support'

    compile 'org.modelmapper:modelmapper:2.3.5'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    //database
    runtimeOnly 'mysql:mysql-connector-java'
    compile 'com.google.cloud.sql:mysql-socket-factory-connector-j-8:1.2.0'
    implementation 'org.flywaydb:flyway-core'

    //test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //swagger-ui
    implementation "io.springfox:springfox-boot-starter:3.0.0"
    compile 'io.springfox:springfox-swagger-ui:3.0.0'

    //secret manager
    implementation platform('com.google.cloud:libraries-bom:16.3.0')
    compile 'com.google.cloud:google-cloud-secretmanager'
}

test {
    useJUnitPlatform()
}

def staticDir = "$buildDir/resources/main/static"
task copyAngular(type: Copy) {
    from "angular/dist/gcp-demo-angular"
    into staticDir
}
processResources.dependsOn copyAngular

tasks.register("bootRunDev") {
    group = "application"
    description = "Runs the Spring Boot application with the dev profile"
    doFirst {
        tasks.bootRun.configure {
            systemProperty("spring.profiles.active", "dev")
        }
    }
    finalizedBy("bootRun")
}

appengine {
    deploy {
        stopPreviousVersion = true
        promote = true
        projectId = 'GCLOUD_CONFIG'
        version = 'GCLOUD_CONFIG'
    }
}

springBoot {
    buildInfo()
}

reckon {
    scopeFromProp()
    stageFromProp('dev', 'rc', 'final')
}

reckonTagCreate.dependsOn check
